---
- name: Install Cribl Stream leader
  hosts: myhosts
  gather_facts: yes
  vars:
    install_dir: /opt/cribl
    owner: cribl
    group: cribl
    leader:
      host: 0.0.0.0
      port: 4200
      authToken: criblmaster
      tls:
        disabled: true
    ssh_key:
      src_path: ~/.ssh/id_ed25519
      dest_path: /home/{{ owner }}/.ssh/git_ssh.key
    git:
      author:
        email: nrgrobbert@msn.com
        name: Robbert Hink
      domain: github.com
      remote_repo_url: git@github.com:robb3rt/cribl.git

  tasks:
  - name: Ensure Linux OS and x64 or ARM64 Architecture
    assert:
      that:
        - ansible_system == 'Linux'
        - ansible_architecture == 'x86_64' or ansible_architecture == 'aarch64'
      fail_msg: "This playbook only supports Linux systems with x64 or ARM64 architectures."

  - name: Ensure "{{ owner }}" user exists
    user:
      name: "{{ owner }}"
      comment: Cribl Stream user
  
  - name: Ensure install_dir exists
    file:
      path: "{{ install_dir }}"
      state: directory
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 0700

  - name: Ensure Versioning prerequisite is installed
    package:
      name: git
      state: present

  #Todo: be able to select a version, but only one version can be selected from versions.json: CRIBL-9568
  - name: Download and decompress Cribl latest version
    unarchive:
      src: "{{ lookup('ansible.builtin.url', 'https://cdn.cribl.io/dl/latest-arm64' if ansible_architecture == 'aarch64' else 'https://cdn.cribl.io/dl/latest') }}"
      dest: "{{ install_dir }}"
      extra_opts: [--strip-components=1]
      mode: 0755
      remote_src: yes
      owner: "{{ owner }}"
      group: "{{ group }}"
      creates: "{{ install_dir }}/bin"

  - name: Ensure installation was successful
    file:
      path: "{{ install_dir }}/local/_system"
      state: directory
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 0700
    when: git.remote_repo_url is not defined

  #run this if no remote repo is defined
  - name: Bootstrap configuration
    copy: 
      dest: "{{ install_dir }}/local/_system/instance.yml"
      owner: "{{ owner }}"
      group: "{{ group }}"
      content: |
        distributed:
          mode: master
          master:
            host: {{ leader.host }}
            port: {{ leader.port }}
            authToken: {{ leader.authToken }}
            tls:
              disabled: {{ leader.tls.disabled | bool }}
          tags: []
    when: git.remote_repo_url is not defined

  - name: Create .ssh folder
    file:
      path: "{{ ssh_key.dest_path | dirname }}"
      state: directory
      owner: "{{ owner }}"
      group: "{{ group }}"
      mode: 0700
    when: git.remote_repo_url is defined

  - name: Copy private key to target host
    copy:
      src: "{{ ssh_key.src_path }}"
      dest: "{{ ssh_key.dest_path }}"   # Change destination path as needed
      mode: 0600
      owner: "{{ owner }}"
      group: "{{ group }}"
    when: git.remote_repo_url is defined

  - name: Recover configuration from remote Git repository
    shell: |
      su cribl -c "cd {{ install_dir }} &&
        git init &&
        git config --global --add safe.directory {{ install_dir }} &&
        git config --global core.sshCommand 'ssh -i {{ ssh_key.dest_path }}' &&
        git config --global user.email '{{ git.author.email }}' &&
        git config --global user.name '{{ git.author.name }}' &&
        git remote add origin {{ git.remote_repo_url }} &&
        ssh-keyscan -t rsa {{ git.domain }} >> {{ ssh_key.dest_path | dirname }}/known_hosts &&
        git fetch origin &&
        git reset --hard origin/master"
    when: git.remote_repo_url is defined

  - name: Ensure the recovery of the configuration worked
    stat:
      path: "{{ install_dir }}/local/_system/instance.yml"
    register: file_stat
    failed_when: not file_stat.stat.exists
    changed_when: false
    tags:
      - always
    when: git.remote_repo_url is defined

  - name: Get facts for current container
    community.docker.current_container_facts:

  - name: Enable systemd service and start Cribl Stream Leader
    shell: "{{ item }}"
    loop:
      - "{{ install_dir }}/bin/cribl boot-start enable -u cribl"
      - "systemctl start cribl"
    when: not ansible_module_running_in_container

  - name: Start Cribl Stream Leader on container
    shell: "su - cribl -c '( ( nohup /opt/cribl/bin/cribl start 1>/dev/null 2>&1 ) & )'"
    async: 5
    poll: 0
    when: ansible_module_running_in_container
